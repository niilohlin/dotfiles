snippet dump
	print("${1:obj} = " .. ${1:obj})

snippet demo_nvim_lsp_client
      vim.api.nvim_create_autocmd('BufEnter', {
        pattern = '*.zsh',
        callback = function()
          local client_id, err_message = vim.lsp.start_client {
            name = "${1:name}",
            cmd = { "${2:cmd}" },
            capabilities = capabilities,
          }

          if client_id then
            vim.lsp.buf_attach_client(0, client_id)
            print("${1:name} attached")
          else
            print("${1:name} failed to start: " .. (err_message or "?"))
          end
        end,
      })

snippet demo_json
	#!/usr/bin/env lua

	local json = require('json')

snippet demo_logger
	local log_file = io.open("${1:log_file}", "w+")

	local function log(string)
	  if log_file then
	    log_file:write("[DEBUG] " .. string .. "\n")
	    log_file:flush()
	  end
	end


snippet demo_json_rpc
	-- json_rpc

	local json_rpc = {}

	function json_rpc.encode(data)
	  local json_data = json.encode(data)
	  local content_header = "Content-Length: " .. #json_data .. "\r\n\r\n"
	  return content_header .. json_data
	end

	function json_rpc.decode_header(header)
	  local sep = header:find('\\n', 1, true) or #header

	  local prefix = "Content-Length: "
	  local number = header:sub(#prefix, sep):gsub("%s+", "")
	  return tonumber(number) + 2
	end

	function json_rpc.decode(data)
	  return json.decode(data:gsub("%s+", ""))
	end

snippet demo_server
	-- server

	local server = {
	  registered_methods = {},
	}

	function server:start()
	  ::continue::
	  while true do
	    log("reading from stdin")
	    local header = io.read("*l")
	    local to_read = json_rpc.decode_header(header)
	    local body = io.read(to_read)
	    log("body: " .. body)
	    local decoded = json_rpc.decode(body)
	    log("decoded " .. tostring(decoded))
	    if not decoded then
	      return
	    end

	    local method_name = decoded["method"]
	    if method_name == nil then
	      log("no method name")
	      goto continue
	    end

	    local method = self.registered_methods[method_name]

	    if method == nil then
	      log("got unregistered method " .. method_name)
	      goto continue
	    end
	    log("got method " .. decoded["method"])
	    local response = method(decoded)

	    if response then
	      local encoded_response = json_rpc.encode(response)
	      log("responding: " ..encoded_response)
	      io.write(encoded_response)
	      io.flush()
	    end
	  end
	end

snippet demo_register_initialize
	server.registered_methods = {
	  ["initialize"] = function(params)
	    return {
	      jsonrpc = "2.0",
	      id = params["id"],
	      result = {
	        serverInfo = {
	          name = "${1:name}",
	          version = "${2:version}",
	        },
	        capabilities = {
	          ${3:completionProvider = \{\}}
	        },
	      },
	    }
	  end,
	}

	server:start()


snippet demo_register_completion
	  ["textDocument/completion"] = function(params)
	    local handle = io.popen("zsh -c 'echo $commands | xargs basename | sort'")
	    if not handle then
	      log("fatal error, no handle")
	      assert(false, "missing handle")
	      return
	    end

	    local result = {}
	    for line in handle:lines() do
	      if line then
	        table.insert(
	          result,
	          {
	            label = line,
	            kind = 3,
	            detail = line,
	            documentation = line,
	          }
	        )
	      end
	    end
	    handle:close()

	    return {
	      jsonrpc = "2.0",
	      id = params["id"],
	      result = result,
	    }
	  end
